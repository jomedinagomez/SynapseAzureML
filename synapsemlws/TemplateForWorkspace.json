{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "synapsemlws"
		},
		"AzureSqlDatabase1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase1'"
		},
		"synapsemlws-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'synapsemlws-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:synapsemlws.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"AzureMLService1_properties_typeProperties_subscriptionId": {
			"type": "string",
			"defaultValue": "14585b9f-5c83-4a76-8055-42149123f99f"
		},
		"AzureMLService1_properties_typeProperties_resourceGroupName": {
			"type": "string",
			"defaultValue": "SynapseMLrg"
		},
		"synapsemlws-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://synapseadslg2.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/AzureMLService1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureMLService",
				"typeProperties": {
					"subscriptionId": "[parameters('AzureMLService1_properties_typeProperties_subscriptionId')]",
					"resourceGroupName": "[parameters('AzureMLService1_properties_typeProperties_resourceGroupName')]",
					"mlWorkspaceName": "SynapseMLws",
					"authentication": "MSI"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSqlDatabase1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase1_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/synapsemlws-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('synapsemlws-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/synapsemlws-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('synapsemlws-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/STEP1_Data_Prep')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "synapseml",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "80a5b742-fd8e-4524-b0c6-7619c3cec4fd"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/14585b9f-5c83-4a76-8055-42149123f99f/resourceGroups/SynapseMLrg/providers/Microsoft.Synapse/workspaces/synapsemlws/bigDataPools/synapseml",
						"name": "synapseml",
						"type": "Spark",
						"endpoint": "https://synapsemlws.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/synapseml",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.4",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56,
						"automaticScaleJobs": false
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# Importing pyspark dependencies\r\n",
							"from pyspark.sql.types import IntegerType,BooleanType,DateType,NumericType,TimestampType\r\n",
							"from pyspark.ml.feature import Binarizer, Bucketizer, QuantileDiscretizer\r\n",
							"from pyspark.sql.functions import col\r\n",
							"import pyspark.sql.functions as F\r\n",
							"\r\n",
							"# Add required imports\r\n",
							"import com.microsoft.spark.sqlanalytics\r\n",
							"from com.microsoft.spark.sqlanalytics.Constants import Constants\r\n",
							"\r\n",
							"# Importing mlflow libraries\r\n",
							"from mlflow.models import infer_signature, set_signature\r\n",
							"from mlflow.models.model import get_model_info\r\n",
							"import mlflow\r\n",
							"\r\n",
							"# Importing general libraries\r\n",
							"from sklearn.metrics import accuracy_score, f1_score, precision_score, confusion_matrix, recall_score, roc_auc_score, classification_report\r\n",
							"import pandas as pd"
						],
						"outputs": [],
						"execution_count": 45
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### 1.1 Read raw data from CSV"
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#### 1.1.1 Reading green taxi data"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# Read from existing internal table\r\n",
							"green_raw = (spark.read\r\n",
							"                     .synapsesql(\"synapseazuremldedicates.dbo.greenTaxiData\"))\r\n",
							"\r\n",
							"# Show contents of the dataframe\r\n",
							"display(green_raw.head(5))"
						],
						"outputs": [],
						"execution_count": 46
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"green_columns_remap =    {\r\n",
							"        \"vendorID\": \"vendor\",\r\n",
							"        \"lpepPickupDatetime\": \"pickup_datetime\",\r\n",
							"        \"lpepDropoffDatetime\": \"dropoff_datetime\",\r\n",
							"        \"storeAndFwdFlag\": \"store_forward\",\r\n",
							"        \"pickupLongitude\": \"pickup_longitude\",\r\n",
							"        \"pickupLatitude\": \"pickup_latitude\",\r\n",
							"        \"dropoffLongitude\": \"dropoff_longitude\",\r\n",
							"        \"dropoffLatitude\": \"dropoff_latitude\",\r\n",
							"        \"passengerCount\": \"passengers\",\r\n",
							"        \"fareAmount\": \"cost\",\r\n",
							"        \"tripDistance\": \"distance\",\r\n",
							"    }\r\n",
							"\r\n",
							"select_expr = [f\"{col} as {new_name}\" for col, new_name in green_columns_remap.items()]\r\n",
							"green_remapped = green_raw.selectExpr(*select_expr)\r\n",
							"display(green_remapped.head(5))"
						],
						"outputs": [],
						"execution_count": 47
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#### 1.1.2 Reading yellow taxi data"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# Read from existing internal table\r\n",
							"yellow_raw  = (spark.read\r\n",
							"                     .synapsesql(\"synapseazuremldedicates.dbo.yellowTaxiData\"))\r\n",
							"\r\n",
							"# Show contents of the dataframe\r\n",
							"display(yellow_raw.head(5))"
						],
						"outputs": [],
						"execution_count": 48
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"yellow_columns_remap = {\r\n",
							"        \"vendorID\": \"vendor\",\r\n",
							"        \"tpepPickupDateTime\": \"pickup_datetime\",\r\n",
							"        \"tpepDropoffDateTime\": \"dropoff_datetime\",\r\n",
							"        \"storeAndFwdFlag\": \"store_forward\",\r\n",
							"        \"startLon\": \"pickup_longitude\",\r\n",
							"        \"startLat\": \"pickup_latitude\",\r\n",
							"        \"endLon\": \"dropoff_longitude\",\r\n",
							"        \"endLat\": \"dropoff_latitude\",\r\n",
							"        \"passengerCount\": \"passengers\",\r\n",
							"        \"fareAmount\": \"cost\",\r\n",
							"        \"tripDistance\": \"distance\",\r\n",
							"    }\r\n",
							"\r\n",
							"select_expr = [f\"{col} as {new_name}\" for col, new_name in yellow_columns_remap.items()]\r\n",
							"yellow_remapped = yellow_raw.selectExpr(*select_expr)\r\n",
							"display(yellow_remapped.head(5))"
						],
						"outputs": [],
						"execution_count": 49
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### 1.2 Combining data from raw data sources"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_combined_taxi = green_remapped.union(yellow_remapped)\r\n",
							"\r\n",
							"print(\"Length of Green DataFrame :\" , green_remapped.count())\r\n",
							"print(\"Length of Yellow DataFrame :\" , yellow_remapped.count())\r\n",
							"print(\"Length of combined dataframes :\" , df_combined_taxi.count())"
						],
						"outputs": [],
						"execution_count": 50
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### 1.3 Saving merged dataset as table"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#https://learn.microsoft.com/en-us/azure/synapse-analytics/spark/synapse-spark-sql-pool-import-export?tabs=scala%2Cscala1%2Cscala2%2Cscala3%2Cscala4%2Cpython5#write-using-basic-authentication"
						],
						"outputs": [],
						"execution_count": 51
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_combined_taxi.write.mode(\"overwrite\").synapsesql(\"synapseazuremldedicates.dbo.combined_taxi_data\")"
						],
						"outputs": [],
						"execution_count": 52
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### 1.4 Data Transformation"
						]
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#### 1.4.1 Transforming float64 fields"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# Convert String to Integer Type\r\n",
							"df_combined_taxi = df_combined_taxi.withColumn(\"pickup_longitude\",df_combined_taxi.pickup_longitude.cast('double')).withColumn(\"pickup_latitude\",df_combined_taxi.pickup_latitude.cast('double')).withColumn(\"dropoff_longitude\",df_combined_taxi.dropoff_longitude.cast('double')).withColumn(\"dropoff_latitude\",df_combined_taxi.dropoff_latitude.cast('double')).withColumn(\"distance\",df_combined_taxi.distance.cast('double')).withColumn(\"cost\",df_combined_taxi.cost.cast('double')).withColumn(\"passengers\",df_combined_taxi.passengers.cast('int'))\r\n",
							"display(df_combined_taxi.head(5))"
						],
						"outputs": [],
						"execution_count": 53
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"latlong_filtered_df = df_combined_taxi.filter( (df_combined_taxi.pickup_longitude <= -73.72) & \\\r\n",
							"(df_combined_taxi.pickup_longitude >= -74.09) & \\\r\n",
							"(df_combined_taxi.pickup_latitude  <= 40.88) \\\r\n",
							"& (df_combined_taxi.pickup_latitude >= 40.53)\\\r\n",
							"& (df_combined_taxi.dropoff_longitude <= -73.72)\\\r\n",
							"& (df_combined_taxi.dropoff_longitude >= -74.72)\\\r\n",
							"& (df_combined_taxi.dropoff_latitude <= 40.88)\\\r\n",
							"& (df_combined_taxi.dropoff_latitude >= 40.53)\\\r\n",
							")\r\n",
							"\r\n",
							"latlong_filtered_df.count()"
						],
						"outputs": [],
						"execution_count": 54
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#### 1.4.2 Transforming pickup_datetime"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"latlong_filtered_df = latlong_filtered_df.withColumn(\"pickup_datetime\",F.to_timestamp(col(\"pickup_datetime\"), \"M/d/yyyy H:mm\"))\r\n",
							"display(latlong_filtered_df.head(5))"
						],
						"outputs": [],
						"execution_count": 55
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"normalized_df = latlong_filtered_df.withColumn('pickup_weekday',(F.dayofweek('pickup_datetime')))\\\r\n",
							"    .withColumn('pickup_month',(F.month('pickup_datetime')))\\\r\n",
							"    .withColumn('pickup_monthday',(F.dayofmonth('pickup_datetime')))\\\r\n",
							"    .withColumn('pickup_hour',(F.hour('pickup_datetime')))\\\r\n",
							"    .withColumn('pickup_minute',(F.minute('pickup_datetime')))\\\r\n",
							"    .withColumn('pickup_second',(F.second('pickup_datetime'))).drop(\"pickup_datetime\")\r\n",
							"\r\n",
							"display(normalized_df.head(5))"
						],
						"outputs": [],
						"execution_count": 56
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#### 1.4.3 Transforming dropoff_datetime"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"normalized_df =  normalized_df.withColumn(\"dropoff_datetime\",F.to_timestamp(col(\"dropoff_datetime\"), \"M/d/yyyy H:mm\"))\r\n",
							"display(normalized_df.head(5))"
						],
						"outputs": [],
						"execution_count": 57
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"normalized_df = normalized_df.withColumn('dropoff_weekday',(F.dayofweek('dropoff_datetime')))\\\r\n",
							"    .withColumn('dropoff_month',(F.month('dropoff_datetime')))\\\r\n",
							"    .withColumn('dropoff_monthday',(F.dayofmonth('dropoff_datetime')))\\\r\n",
							"    .withColumn('dropoff_hour',(F.hour('dropoff_datetime')))\\\r\n",
							"    .withColumn('dropoff_minute',(F.minute('dropoff_datetime')))\\\r\n",
							"    .withColumn('dropoff_second',(F.second('dropoff_datetime'))).drop(\"dropoff_datetime\")\r\n",
							"\r\n",
							"display(normalized_df.head(5))"
						],
						"outputs": [],
						"execution_count": 58
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#### 1.4.4 Change the store_forward column to binary values\r\n",
							""
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"print(\"--------------- Count before transforming into binary values ---------------\")\r\n",
							"latlong_filtered_df.groupBy(\"store_forward\").count().show()\r\n",
							"\r\n",
							"normalized_df = normalized_df.withColumn('store_forward', F.when(F.col('store_forward') == \"Y\", F.lit(1)).otherwise(F.lit(0)))\r\n",
							"\r\n",
							"print(\"--------------- Count after transforming into binary values ---------------\")\r\n",
							"normalized_df.groupBy(\"store_forward\").count().show()"
						],
						"outputs": [],
						"execution_count": 59
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"#### 1.4.5 Filtering by distance and cost"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"print(\"--------------- Count before filter ---------------\")\r\n",
							"print(normalized_df.count())\r\n",
							"\r\n",
							"final_df = normalized_df.filter( (normalized_df.distance > 0) & \\\r\n",
							"(normalized_df.cost > 0))\r\n",
							"\r\n",
							"final_df.count()\r\n",
							"\r\n",
							"print(\"--------------- Count after filter ---------------\")\r\n",
							"print(final_df.count())"
						],
						"outputs": [],
						"execution_count": 60
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### 1.5 Save Transformed regression Data"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df_combined_taxi.write.mode(\"overwrite\").synapsesql(\"synapseazuremldedicates.dbo.reg_transformed_taxi_data\")"
						],
						"outputs": [],
						"execution_count": 61
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### 1.6 Transform target into classes and saving table"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"discretizer = QuantileDiscretizer(numBuckets=5, inputCol=\"cost\", outputCol=\"cost_class\")\r\n",
							"bucketed_df = discretizer.fit(final_df).transform(final_df)\r\n",
							"bucketed_df.groupBy(\"cost_class\").count().show()"
						],
						"outputs": [],
						"execution_count": 62
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"display(bucketed_df.head(10))"
						],
						"outputs": [],
						"execution_count": 63
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"bucketed_df.write.mode(\"overwrite\").synapsesql(\"synapseazuremldedicates.dbo.class_transformed_taxi_data\")"
						],
						"outputs": [],
						"execution_count": 64
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/STEP2_Model_Training')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "synapseml",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "56g",
					"driverCores": 8,
					"executorMemory": "56g",
					"executorCores": 8,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "d5582b1c-751d-480e-ab3d-732950471dad"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/14585b9f-5c83-4a76-8055-42149123f99f/resourceGroups/SynapseMLrg/providers/Microsoft.Synapse/workspaces/synapsemlws/bigDataPools/synapseml",
						"name": "synapseml",
						"type": "Spark",
						"endpoint": "https://synapsemlws.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/synapseml",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.4",
						"nodeCount": 10,
						"cores": 8,
						"memory": 56,
						"automaticScaleJobs": false
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"## 2. Model Training"
						]
					},
					{
						"cell_type": "code",
						"metadata": {},
						"source": [
							"# Importing pyspark dependencies\r\n",
							"from pyspark.sql.types import IntegerType,BooleanType,DateType,NumericType,TimestampType\r\n",
							"from pyspark.ml.feature import Binarizer, Bucketizer, QuantileDiscretizer\r\n",
							"from com.microsoft.spark.sqlanalytics.Constants import Constants\r\n",
							"import com.microsoft.spark.sqlanalytics\r\n",
							"from pyspark.sql.functions import col\r\n",
							"import pyspark.sql.functions as F\r\n",
							"\r\n",
							"# Importing mlflow libraries\r\n",
							"from mlflow.models import infer_signature, set_signature\r\n",
							"from mlflow.models.model import get_model_info\r\n",
							"import mlflow\r\n",
							"\r\n",
							"\r\n",
							"# Importing general libraries\r\n",
							"from sklearn.metrics import accuracy_score, f1_score, precision_score, confusion_matrix, recall_score, roc_auc_score, classification_report\r\n",
							"import pandas as pd\r\n",
							"\r\n",
							"#AML workspace authentication using linked service\r\n",
							"from notebookutils.mssparkutils import azureML\r\n",
							"linked_service_name = \"AzureMLService1\"\r\n",
							"ws = azureML.getWorkspace(linked_service_name)\r\n",
							"mlflow.set_tracking_uri(ws.get_mlflow_tracking_uri().replace(\"v2.0\",\"v1.0\"))\r\n",
							"\r\n",
							"## Importing SynapseML\r\n",
							"from synapse.ml.featurize import Featurize\r\n",
							"from synapse.ml.lightgbm import *\r\n",
							"from synapse.ml.train import ComputeModelStatistics"
						],
						"outputs": [],
						"execution_count": 199
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"# Read from existing internal table\r\n",
							"df = (spark.read\r\n",
							"                     .synapsesql(\"synapseazuremldedicates.dbo.class_transformed_taxi_data\")).drop('cost')\r\n",
							"\r\n",
							"# Show contents of the dataframe\r\n",
							"display(df.head(5))"
						],
						"outputs": [],
						"execution_count": 200
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### 2.2 Split dataset in train/test using a stratified strategy"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"train_df = df.sampleBy(\"cost_class\", fractions={0: 0.7, 1: 0.7, 2: 0.7, 3: 0.7, 4: 0.7}, seed=10)\r\n",
							"\r\n",
							"print(\"----------------------------------------------------------------------\")\r\n",
							"print(\"Printing count of train dataset\")\r\n",
							"train_df.groupBy(\"cost_class\").count().show()\r\n",
							"\r\n",
							"test_df = df.subtract(train_df)\r\n",
							"\r\n",
							"print(\"----------------------------------------------------------------------\")\r\n",
							"print(\"Printing count of test dataset\")\r\n",
							"test_df.groupBy(\"cost_class\").count().show()"
						],
						"outputs": [],
						"execution_count": 201
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### 2.3 Train featurizer"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"mlflow.autolog(exclusive=False)\r\n",
							"\r\n",
							"#Set MLflow experiment.\r\n",
							"experiment_name = \"taxi-classifier-experiment\"\r\n",
							"mlflow.set_experiment(experiment_name)\r\n",
							"\r\n",
							"with mlflow.start_run(run_name=\"class_featurization\") as featurization:\r\n",
							"    feature_cols = [column for column in train_df.columns if column!=\"cost_class\"]\r\n",
							"    featurize = (Featurize()\r\n",
							"    .setOutputCol(\"features\")\r\n",
							"    .setInputCols(feature_cols)\r\n",
							"    .setOneHotEncodeCategoricals(True)\r\n",
							"    .setNumFeatures(4096))\r\n",
							"    featurizer_model = featurize.fit(train_df)\r\n",
							"    train_df_trans = featurizer_model.transform(train_df)\r\n",
							"    test_df_trans = featurizer_model.transform(test_df)\r\n",
							"\r\n",
							"    mlflow.end_run()\r\n",
							"\r\n",
							"## Registering featurizer\r\n",
							"model_name = 'featurizer'\r\n",
							"model_uri = f\"runs:/{featurization.info.run_id}/model\"\r\n",
							"mlflow.register_model(model_uri=model_uri, name=model_name)"
						],
						"outputs": [],
						"execution_count": 203
					},
					{
						"cell_type": "markdown",
						"metadata": {
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### 2.3 Train classifier"
						]
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": true
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"mlflow.autolog(exclusive=False)\r\n",
							"\r\n",
							"#Set MLflow experiment.\r\n",
							"experiment_name = \"taxi-classifier-experiment\"\r\n",
							"mlflow.set_experiment(experiment_name)\r\n",
							"\r\n",
							"with mlflow.start_run(run_name=\"class_training\") as training:\r\n",
							"\r\n",
							"    lightgbm_classifier = (LightGBMClassifier()\r\n",
							"            .setFeaturesCol(\"features\")\r\n",
							"            .setRawPredictionCol(\"rawPrediction\")\r\n",
							"            .setDefaultListenPort(12402)\r\n",
							"            .setNumLeaves(5)\r\n",
							"            .setNumIterations(10)\r\n",
							"            .setObjective(\"multiclass\")\r\n",
							"            .setLabelCol(\"cost_class\")\r\n",
							"            .setLeafPredictionCol(\"leafPrediction\")\r\n",
							"            .setFeaturesShapCol(\"featuresShap\"))\r\n",
							"\r\n",
							"    lightgbm_model = lightgbm_classifier.fit(train_df_trans)\r\n",
							"\r\n",
							"    # Use mlflow.spark.save_model to save the model to your path\r\n",
							"    mlflow.spark.save_model(lightgbm_model, \"lightgbm_model\")\r\n",
							"    # Use mlflow.spark.log_model to log the model if you have a connected mlflow service\r\n",
							"    mlflow.spark.log_model(lightgbm_model, \"lightgbm_model\")\r\n",
							"\r\n",
							"    # Use mlflow.spark.load_model to load model back as PipelineModel and apply transform\r\n",
							"    predictions = lightgbm_model.transform(train_df_trans)\r\n",
							"    metrics = ComputeModelStatistics(evaluationMetric=\"classification\", labelCol='cost_class', scoredLabelsCol='prediction').transform(predictions).collect()\r\n",
							"    mlflow.log_metric(\"Train accuracy\", metrics[0]['accuracy'])\r\n",
							"    mlflow.log_metric(\"Train precision\", metrics[0]['precision'])\r\n",
							"    mlflow.log_metric(\"Train recall\", metrics[0]['recall'])\r\n",
							"    mlflow.log_metric(\"Train macro_averaged_precision\", metrics[0]['macro_averaged_precision'])\r\n",
							"    mlflow.log_metric(\"Train macro_averaged_recall\", metrics[0]['macro_averaged_recall'])\r\n",
							"    print(metrics)\r\n",
							"\r\n",
							"    predictions = lightgbm_model.transform(test_df_trans)\r\n",
							"    metrics = ComputeModelStatistics(evaluationMetric=\"classification\", labelCol='cost_class', scoredLabelsCol='prediction').transform(predictions).collect()\r\n",
							"    mlflow.log_metric(\"Test accuracy\", metrics[0]['accuracy'])\r\n",
							"    mlflow.log_metric(\"Test precision\", metrics[0]['precision'])\r\n",
							"    mlflow.log_metric(\"Test recall\", metrics[0]['recall'])\r\n",
							"    mlflow.log_metric(\"Test macro_averaged_precision\", metrics[0]['macro_averaged_precision'])\r\n",
							"    mlflow.log_metric(\"Test macro_averaged_recall\", metrics[0]['macro_averaged_recall'])\r\n",
							"    print(metrics)\r\n",
							"\r\n",
							"    mlflow.end_run()\r\n",
							"\r\n",
							"## Registering Classifier \r\n",
							"model_name = 'classification_demo'\r\n",
							"model_uri = f\"runs:/{training.info.run_id}/lightgbm_model\"\r\n",
							"mlflow.register_model(model_uri=model_uri, name=model_name)"
						],
						"outputs": [],
						"execution_count": 276
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": true
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"### --------------------------------------------------------------------------- ###\r\n",
							"model_name = 'featurizer'\r\n",
							"# Search registered models for the \r\n",
							"for model in mlflow.search_registered_models():\r\n",
							"    if model.name == model_name:\r\n",
							"        latest_version_run_id = model.latest_versions[0].run_id\r\n",
							"        model_found = True\r\n",
							"        break\r\n",
							"\r\n",
							"# load model from Azure Machine Learning\r\n",
							"run_id = latest_version_run_id\r\n",
							"artifact_path = \"model\"\r\n",
							"model_uri = f\"runs:/{run_id}/{artifact_path}\"\r\n",
							"featurizer = mlflow.pyfunc.load_model(model_uri)\r\n",
							"\r\n",
							"### --------------------------------------------------------------------------- ###\r\n",
							"\r\n",
							"model_name = 'classification_demo'\r\n",
							"# Search registered models for the \r\n",
							"for model in mlflow.search_registered_models():\r\n",
							"    if model.name == model_name:\r\n",
							"        latest_version_run_id = model.latest_versions[0].run_id\r\n",
							"        model_found = True\r\n",
							"        break\r\n",
							"\r\n",
							"# load model from Azure Machine Learning\r\n",
							"run_id = latest_version_run_id\r\n",
							"artifact_path = \"lightgbm_model\"\r\n",
							"model_uri = f\"runs:/{run_id}/{artifact_path}\"\r\n",
							"model = mlflow.pyfunc.load_model(model_uri)\r\n",
							"\r\n",
							"### --------------------------------------------------------------------------- ###\r\n",
							"\r\n",
							"test_df_trans = featurizer_model.transform(test_df)\r\n",
							"pandas_test_df = test_df_trans.toPandas()\r\n",
							"\r\n",
							"# testing model\r\n",
							"test_predictions = model.predict(pandas_test_df)"
						],
						"outputs": [],
						"execution_count": 217
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"model = mlflow.pyfunc.load_model(model_uri=f\"models:/classification_demo/latest\")\r\n",
							"\r\n",
							"test_predictions = model.predict(pandas_test_df)"
						],
						"outputs": [],
						"execution_count": 223
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"test_df_trans.toPandas()"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/synapseml')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 60
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 10,
					"minNodeCount": 3
				},
				"nodeCount": 10,
				"nodeSize": "Medium",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.4",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "westus2"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/synapseazuremldedicates')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"annotations": []
			},
			"dependsOn": [],
			"location": "westus2"
		}
	]
}